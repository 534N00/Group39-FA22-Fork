import logo from './logo.svg';
import './App.css';
//import React,  { useState } from 'react'

/*
const Counter = () => {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  )
}

//research ReactDOM
//ReactDOM.render(<Counter />, document.getElementById('app'))
*/
function WelcomeMessage({ myprop }) {
  return <p>{myprop}</p>
}

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <WelcomeMessage myprop={'somevalue'} />
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;

// Research for components in React
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>
}

function App() {
  return(
  <div>
    <Welcome name="Sara" />
    <Welcome name="Cahal" />
    <Welcome name="Edite" />
  </div>
  );
}

function formatDate(date) {
  return date.toLocaleDateString();
}

function Avatar(props) {
  return (
  <img className="Avatar" 
    src={props.user.avatarUrl}
    alt={props.user.name}
    />
  );
}

function UserInfo(props) {
  return (
    <div className="UserInfo">
      <Avatar user={props.user} />
      <div className="UserInfo-name">
        {props.user.name}
      </div>
    </div>
  );
}
// if parts of UI used several times, separate components
//Buttons, Panel, Avatar

function Comment(props) {
  return (
    <div className="Comment">
      <UserInfo user={props.author} />
      <div className="Comment-text">
        {props.text}
      </div>
      <div className="Comment-date">
        {formatDate(props.date)}
      </div>
    </div>
  );
}

const comment = {
  date: new Date(),
  text: 'I hope you enjoy learning React!',
  author: {
    name: 'Hello Kitty',
    avatarUrl: 'http://placekitten.com/g/64/64'
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
<Comment 
  date={comment.date}
  text={comment.text}
  author={comment.author}
  />);

/*
const root = ReactDOM.createRoot(document.getElementById('root'));
const element = <Welcome name="Sara" />; // element sends argument to Welcome function
root.render(<Comment />);
*/

// states in React -- remember to research arrow functions in javascript

function FormattedDate(props) {
  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;
}
class Clock extends React.Component {
  constructor(props) {
    super(props);
    //can only use this.state in constructor
    this.state = {date: new Date()};
    /*
    // accepts function, function takes previous state then updates to second argument
    this.setState((state, props) => ({
      counter: state.counter + props.increment
    }));
    
    this.setState(function(state, props) {
      return {
        counter: state.counter + props.increment
      };
    });
    */
  }

  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

  tick() {
    this.setState({
      date: new Date()
    });
  }
// what is displayed on screen
  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <FormattedDate date={this.state.date} />
      </div>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Clock />);

// Handling events (Buttons)
// provide listener when event initially rendered
class Toggle extends React.Component {
  constructor(props) {
    super(props);
    this.state = {isToggleOn: true};
    // make "this" work in the callback -- if don't bind, then this is undefined
    this.handleClick = this.handleClick.bind(this);
    /*
    // or can do this
    handleClick = () => {
      console.log('this is:', this);
    };
    */
  }
  
  handleClick() {
    this.setState(prevState => ({
      isToggleOn : !prevState.isToggleOn
    }));
  }
  render() {
    return (
      <button onClick={this.handleClick}>
        {this.state.isToggleOn ? 'ON' : 'OFF'}
      </button>
    );
  }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Toggle />);
